C51 COMPILER V9.51   RTC                                                                   10/04/2018 18:56:15 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN rtc.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE rtc.c ROM(COMPACT) OPTIMIZE(9,SPEED) REGFILE(.\DisplayRoulette.ORC) BROWSE 
                    -DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "display_slot.h"
   2          #ifdef USE_RTC
   3          unsigned char idata rtc_ram[64];
   4          
   5          void rtc_write(unsigned char reg,unsigned char dat)
   6          {
   7   1        while ((RTC0ADR&0x80)==0x80); //wait bussy flag
   8   1        RTC0ADR=reg;
   9   1        RTC0DAT=dat;
  10   1      }
  11          
  12          unsigned char rtc_read(unsigned char reg)
  13          {
  14   1         while ((RTC0ADR&0x80)==0x80); //wait bussy flag
  15   1         RTC0ADR=reg|0x80;     //write busy 1
  16   1         while ((RTC0ADR&0x80)==0x80); //wait bussy flag
  17   1         return RTC0DAT;
  18   1      
  19   1      
  20   1      } 
  21          
  22          bit rtc_readram()
  23          {
  24   1          unsigned char addr;
  25   1      // Read from the entire smaRTClock RAM
  26   1          CRC0CN=0x18;    //init crc generator
  27   1        RTC0ADR = 0x0E;// address the RAMADDR register
  28   1        RTC0DAT = 0x00;// write the address of 0x00 to RAMADDR
  29   1        while ((RTC0ADR & 0x80) == 0x80); // poll on the BUSY bit
  30   1        RTC0ADR = 0x0F; // address the RAMDATA register
  31   1        for (addr = 0; addr < 62; addr++)
  32   1        {
  33   2         RTC0ADR |= 0x80; // initiate a read of the RAMDATA register
  34   2         while ((RTC0ADR & 0x80) == 0x80); // poll on the BUSY bit
  35   2         rtc_ram[addr] = RTC0DAT; // copy the data from the entire RAM
  36   2         CRC0IN=rtc_ram[addr];
  37   2        }
  38   1      
  39   1        RTC0ADR |= 0x80; // initiate a read of the RAMDATA register
  40   1        while ((RTC0ADR & 0x80) == 0x80); // poll on the BUSY bit
  41   1        CRC0CN=0x10;   //select crc byte 0
  42   1        if (RTC0DAT!=CRC0DAT) 
  43   1         return 0;
  44   1      
  45   1        RTC0ADR |= 0x80; // initiate a read of the RAMDATA register
  46   1        while ((RTC0ADR & 0x80) == 0x80); // poll on the BUSY bit
  47   1        CRC0CN=0x11;   //select crc byte 0
  48   1        if (RTC0DAT!= CRC0DAT) 
  49   1         return 0;
  50   1          return 1;
  51   1      
  52   1      }
  53          
  54          void rtc_writeram()
C51 COMPILER V9.51   RTC                                                                   10/04/2018 18:56:15 PAGE 2   

  55          {
  56   1         unsigned char addr;
  57   1         CRC0CN=0x18;    //init crc generator
  58   1      // Write to the entire smaRTClock RAM
  59   1        RTC0ADR = 0x0E;// address the RAMADDR register
  60   1        RTC0DAT = 0x00;// write the address of 0x00 to RAMADDR
  61   1        while ((RTC0ADR & 0x80) == 0x80); // poll on the BUSY bit
  62   1        RTC0ADR = 0x0F;// address the RAMDATA register
  63   1        for (addr = 0; addr < 62; addr++)
  64   1        {
  65   2         CRC0IN=rtc_ram[addr];
  66   2         RTC0DAT = rtc_ram[addr]; // write 0xA5 to every RAM address
  67   2         while ((RTC0ADR & 0x80) == 0x80);// poll on the BUSY bit
  68   2        }
  69   1        CRC0CN=0x10;   //select crc byte 0
  70   1        RTC0DAT = CRC0DAT; // write 0xA5 to every RAM address
  71   1        while ((RTC0ADR & 0x80) == 0x80);// poll on the BUSY bit
  72   1      
  73   1        CRC0CN=0x11;   //select crc byte 1
  74   1        RTC0DAT = CRC0DAT; // write 0xA5 to every RAM address
  75   1        while ((RTC0ADR & 0x80) == 0x80);// poll on the BUSY bit   
  76   1      
  77   1      }
  78          
  79          //setup rtc in self oscilating mode !!!!!
  80          bit rtc_init()
  81          {
  82   1        bit res;
  83   1        unsigned char c;
  84   1      
  85   1        res=1;
  86   1        if (RTC0KEY==3)
  87   1         // problem RTC locked need reset
  88   1          RSTSRC|=0x20;    //software reset
  89   1          //unlock RTC
  90   1        if (RTC0KEY==0)
  91   1         {
  92   2           //unlock the RTC is no locked
  93   2           RTC0KEY = 0xA5;
  94   2           RTC0KEY = 0xF1;
  95   2         };
  96   1      
  97   1        c=rtc_read(6); //READ RTC0CN
  98   1        if (((c&0x20)==0x20) || ((c&0x80)==0))  //check OSCFAIL
  99   1         {
 100   2          res=0;   //save status for return value
 101   2          rtc_write(6,0); //disable RTC  
 102   2          rtc_write(7,0x00); //Selfoscilator mode enable
 103   2          rtc_write(6,0x80); //enable clock power
 104   2         // while ((rtc_read(7)&0x10)!=0x10); //clock be stable not nessery for self oscilating mode
 105   2         // rtc_write(7,0x40); //disable autogain
 106   2         // rtc_write(6,0xd0); //start counting enable missingo clock
 107   2      
 108   2         }
 109   1         return res;
 110   1      }
 111          /*
 112          unsigned long rtc_readTime()
 113          {
 114            unsigned long time;
 115            unsigned char c,d;
 116          
C51 COMPILER V9.51   RTC                                                                   10/04/2018 18:56:15 PAGE 3   

 117             rtc_write(6,0xD1);            //transwer timer value to capture register
 118             while ((rtc_read(6)&0x1)==1); // wait time transwer to capture register
 119          
 120             for (c=2,d=4;d!=0;c++)  
 121                ((unsigned char *) &time)[--d]=rtc_read(c);
 122          
 123             return time;
 124          
 125          }
 126          
 127          void rtc_writeTime( unsigned long time)
 128          {
 129          
 130            unsigned char c,d;
 131          
 132          
 133             for (c=2,d=4;d!=0;c++)  
 134               rtc_write(c,((unsigned char *) &time)[--d]);
 135          
 136             rtc_write(6,0xD2);    //transwer timer value to capture register
 137             while ((rtc_read(6)&0x1)==2); // wait time transwer to capture register
 138          
 139          }
 140          */
 141          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    224    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
