C51 COMPILER V9.51   MBI                                                                   10/04/2018 18:56:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MBI
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MBI.c ROM(COMPACT) OPTIMIZE(9,SPEED) REGFILE(.\DisplayRoulette.ORC) BROWSE 
                    -DEBUG OBJECTEXTEND TABS(2) SRC(.\MBI.SRC)

line level    source

   1          #include "display_slot.h"
   2          #include <intrins.h>
   3          
   4          extern unsigned char idata rtc_ram[64];
   5          #define BALLS 0
   6          
   7          
   8          #ifdef USE_MBI
   9          
  10          #define NO_LACH            -1
  11          
  12          #define DATA_LACH          1
  13          #define GLOBAL_LACH        3
  14          #define READ_CONFIGURATION 5
  15          #define EABLE_ERRORDETECT  7
  16          #define READ_ERRORSTATUS   9
  17          #define WRITE_CONFIG       11
  18          #define RESET_PWM          13
  19          
  20          
  21          
  22          union ctrl {
  23                        struct control {
  24                         unsigned int bt0:1; // 0    -> timeout of gck 0 - diable 1 enable  
  25                         unsigned int bt1:1; // 0    -> thermal protection 0- disable  1-enble
  26                         unsigned int bt9:8; // 0xab -> current gain adjustment
  27                         unsigned int bta:1; // 1    -> pwm data sinhronization 0- auto  1- manual
  28                         unsigned int btb:1; // 0    -> pwm counter reset 0-disable 1- enable
  29                         unsigned int btc:1; // 1    -> 0 - 6 bit pwm 1 - 12 bit pwm
  30                         unsigned int btd:1; // 1    -> reserved bit
  31                         unsigned int bte:1; // 0    -> thermal eror flag 0 - ok readonly              
  32                         unsigned int btf:1; // 0    -> Data loading 0- 15 time + 1 datalach  1- 16 time +1 datalach
  33                        } control;
  34                       unsigned int i;
  35                    };
  36                    
  37          union  ctrl ctrl;
  38          // default ctrl 0b0011011010101100 - >  0x36ac  
  39                    
  40          static void sendWord(unsigned int w,char le)
  41          {
  42   1        
  43   1            w=w;
  44   1            le=le;
  45   1      #pragma asm
  46   1      ;      CLR  mbiLE
  47   1      ;      CLR  Dclk
  48   1        
  49   1             MOV A,#10H
  50   1             CLR C
  51   1             SUBB A,R5
  52   1             XCH  A,R5
  53   1        
  54   1             MOV R4,#8  
C51 COMPILER V9.51   MBI                                                                   10/04/2018 18:56:17 PAGE 2   

  55   1             MOV A,R6      ;high byte of w
  56   1      LOOP1:
  57   1             RLC A
  58   1             MOV sdi,C
  59   1             SETB Dclk
  60   1             DJNZ R5,SETLE1  ;le?
  61   1             SETB mbiLE
  62   1      SETLE1: 
  63   1             CLR  Dclk
  64   1             DJNZ R4,LOOP1
  65   1             
  66   1             MOV R4,#8
  67   1             MOV A,R7    ;LOW BYTE OF W
  68   1      LOOP2:      
  69   1             RLC A
  70   1             MOV  sdi,C
  71   1             SETB Dclk
  72   1             DJNZ R5,SETLE2  ;le?
  73   1             SETB mbiLE
  74   1      SETLE2: 
  75   1             CLR  Dclk
  76   1             DJNZ R4,LOOP2       
  77   1             CLR  mbiLE
  78   1      #pragma endasm
  79   1      
  80   1      }
  81          
  82          //THIS MBI NOT RECIEVE CONFIG OR I MISTAKE BUT 
  83          // IS SET TO 16 + 1 datalach
  84          void mbiInit()
  85           {
  86   1         unsigned char c;
  87   1         ctrl.i=0x36ac; // default control
  88   1         ctrl.control.btf=1;    
  89   1         ctrl.control.bt9=0xff;
  90   1         for (c=0;c<NUM_OF_MBI-1;c++)
  91   1          {
  92   2            sendWord(ctrl.i,NO_LACH);
  93   2          }
  94   1         sendWord(ctrl.i,WRITE_CONFIG);
  95   1       }
  96           
  97           
  98                                          // YU     YD      G      RD     RU
  99          //const unsigned int bright[5] = {0x2500,0x2500,0xcfff,0x1800,0x1800};
 100          //const unsigned int bright[5] = {0xe000,0xe000,0x1000,0x0500,0x0500};
 101          unsigned char xdata screen[NUM_OF_MBI*NUM_OF_COLUMNS*16];
 102          
 103          void mbiSend()
 104           {
 105   1         unsigned char c,d;
 106   1         static column;
 107   1      //   unsigned int dat;
 108   1         unsigned char *(xdata tmp);
 109   1      //   dat=bright[column]; 
 110   1         tmp=&screen[column*NUM_OF_MBI*16];
 111   1         for (d=16;d!=0;d--)
 112   1          {
 113   2           for (c=NUM_OF_MBI-1;c!=0;c--)
 114   2              sendWord(((int) *tmp++)*0x100,NO_LACH);
 115   2           sendWord(((int) *tmp++)*0x100,DATA_LACH);
 116   2          }
C51 COMPILER V9.51   MBI                                                                   10/04/2018 18:56:17 PAGE 3   

 117   1         CNT=0;
 118   1         _nop_();
 119   1         _nop_();
 120   1         CNT=1;
 121   1         _nop_();
 122   1         _nop_();
 123   1         CNT=0;
 124   1         sendWord(((int) (*tmp))*0x100,GLOBAL_LACH);
 125   1         _nop_();
 126   1         _nop_();
 127   1         CNT=1;
 128   1         _nop_();
 129   1         _nop_();
 130   1         CNT=0;
 131   1         if (column==4) 
 132   1              {
 133   2                column=0;
 134   2                RST=1;
 135   2                _nop_();
 136   2                _nop_();
 137   2                _nop_();
 138   2                column=0;
 139   2                RST=0;
 140   2              }
 141   1         else
 142   1          column++;       
 143   1       }
 144           
 145          const unsigned char code cc[10]={4,4,2,0,0,3,3,2,1,1};
 146                                   //  a1 b1 c1 d1 e1 f1 g1 dd1
 147          const unsigned char code cs1[8]={ 1, 0,13,12,11, 3, 4, 8};    
 148                                  //  a2 b2 c2 d2 e2 f2 g2 dd2 
 149          const unsigned char code cs2[8]={ 7,  6, 5, 9,10, 2,15,14};
 150          //screen[NUM_OF_MBI*(16 * 4 /* col 1 */ + 0 /*seg 0*/) + 7 /* chip 7*/];
 151          
 152          struct caddr {
 153                          unsigned int address;
 154                          unsigned char column;
 155                          unsigned char row;
 156                          unsigned char segment;
 157                        } complicate;
 158          void address()
 159           {
 160   1         unsigned int chip,col,seg;
 161   1                     
 162   1         chip = complicate.row/2;
 163   1         col=cc[complicate.column+5*(complicate.row&1)];
 164   1         switch (complicate.column)
 165   1          {
 166   2            case 0:
 167   2              seg=cs1[complicate.segment];
 168   2            break;
 169   2            case 1:
 170   2              seg=cs2[complicate.segment];
 171   2            break;
 172   2            case 2:
 173   2               if (complicate.row&1)
 174   2                seg=cs2[complicate.segment];
 175   2               else
 176   2                seg=cs1[complicate.segment];
 177   2            break;
 178   2            case 3:
C51 COMPILER V9.51   MBI                                                                   10/04/2018 18:56:17 PAGE 4   

 179   2              seg=cs1[complicate.segment];
 180   2            break;
 181   2            case 4:
 182   2              seg=cs2[complicate.segment];
 183   2            break;
 184   2          }
 185   1         complicate.address=NUM_OF_MBI*(16*col+seg)+chip;
 186   1      }
 187           
 188          
 189           
 190          const unsigned char code numbers[16]= {0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6,0xfd,0,0,0,0};
 191          
 192          
 193          void ptr1(char c,unsigned char k)
 194           {
 195   1          unsigned char d;
 196   1          if (c>=10)
 197   1           d = numbers[c/10];
 198   1          else
 199   1           d = numbers[c];
 200   1      
 201   1          for (complicate.segment=0;complicate.segment<8;complicate.segment++)
 202   1           {       
 203   2             address();
 204   2             if ((d&0x80)!=0)
 205   2               screen[complicate.address]=k;
 206   2             else
 207   2               screen[complicate.address]=0;
 208   2             d<<=1;
 209   2           }
 210   1           complicate.column++;
 211   1           if (c<10)
 212   1             return;     
 213   1           d = numbers[c%10];
 214   1          for (complicate.segment=0;complicate.segment<8;complicate.segment++)
 215   1           {       
 216   2             address();
 217   2             if ((d&0x80)!=0)
 218   2               screen[complicate.address]=k;
 219   2             else
 220   2               screen[complicate.address]=0;
 221   2             d<<=1;
 222   2           }     
 223   1           return;
 224   1       }                         //0 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
             -26 27 28 29 30 31 32 33 34 35 36
 225           const char code colors[37]={2,0 ,3 ,0 ,3 ,0 ,3 ,0 , 3, 0 ,3 ,3 ,0 ,3 ,0 ,3 ,0 ,3 ,0 , 0,3 ,0 ,3 ,0 , 3,0 
             -,3 ,0 , 3,3 ,0 ,3 ,0 , 3,0 ,3 ,0}; 
 226            #define GCOLOR 255
 227            #define RCOLOR 90
 228            #define YCOLOR 170
 229            const char code intensity[]={RCOLOR,RCOLOR,GCOLOR,YCOLOR,YCOLOR}; 
 230            
 231           void ptr(char c)
 232           {
 233   1            char ball;
 234   1            ball=rtc_ram[BALLS+c];
 235   1         
 236   1            complicate.row=c;   
 237   1            complicate.column=0;    
 238   1            ptr1(0,0);
C51 COMPILER V9.51   MBI                                                                   10/04/2018 18:56:17 PAGE 5   

 239   1            ptr1(0,0);
 240   1            ptr1(0,0);
 241   1            ptr1(0,0);
 242   1            ptr1(0,0);  
 243   1            if (ball == -1)
 244   1             return ;         
 245   1           complicate.column=colors[ball];
 246   1            ptr1(ball,intensity[complicate.column]);
 247   1               
 248   1          return ;
 249   1       }
 250          
 251          void test()
 252           {
 253   1         unsigned char repeat,tst;
 254   1         unsigned int r;
 255   1         for (repeat=0;repeat<120;repeat++)
 256   1         {
 257   2           for (r=NUM_OF_MBI*NUM_OF_COLUMNS;r;)
 258   2            {
 259   3              --r;
 260   3              complicate.row=r;
 261   3              complicate.column=0;
 262   3              ptr1(tst%10,intensity[complicate.column]);
 263   3              complicate.column=1;
 264   3              ptr1(tst%10,intensity[complicate.column]);
 265   3              complicate.column=2;
 266   3              ptr1(tst%10,intensity[complicate.column]);
 267   3              complicate.column=3;
 268   3              ptr1(tst%10,intensity[complicate.column]);
 269   3              complicate.column=4;
 270   3              ptr1(tst%10,intensity[complicate.column]);
 271   3            }
 272   2          for (r=0;r<800;r++)
 273   2          {
 274   3            WATCHDOG;
 275   3            while (!TF2H); //800HZ refresh rate
 276   3            TF2H=0;
 277   3            mbiSend();
 278   3          }
 279   2          tst++;
 280   2        }
 281   1         while(1);
 282   1       }   
 283          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    813    ----
   CONSTANT SIZE    =     84    ----
   XDATA SIZE       =    640       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
