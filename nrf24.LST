C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE NRF24
OBJECT MODULE PLACED IN nrf24.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE nrf24.c ROM(COMPACT) OPTIMIZE(9,SPEED) REGFILE(.\DisplayRoulette.ORC) BROWS
                    -E DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*
   2          * ----------------------------------------------------------------------------
   3          * “THE COFFEEWARE LICENSE” (Revision 1):
   4          * <ihsan@kehribar.me> wrote this file. As long as you retain this notice you
   5          * can do whatever you want with this stuff. If we meet some day, and you think
   6          * this stuff is worth it, you can buy me a coffee in return.
   7          * -----------------------------------------------------------------------------
   8          * This library is based on this library: 
   9          *   https://github.com/aaronds/arduino-nrf24l01
  10          * Which is based on this library: 
  11          *   http://www.tinkerer.eu/AVRLib/nRF24L01
  12          * -----------------------------------------------------------------------------
  13          */
  14          #include "display_slot.h"
  15          #define LOW 0
  16          #define HIGH 1
  17          #include "nRF24L01.h"
  18          #include "nrf24.h"
  19          
  20          
  21          uint8_t payload_len;
  22          
  23          /* init the hardware pins */
  24          void nrf24_init() 
  25          {
  26   1      //    nrf24_setupPins();
  27   1          nrf24_ce_digitalWrite(LOW);
  28   1          nrf24_csn_digitalWrite(HIGH);    
  29   1      }
  30          
  31          /* configure the module */
  32          void nrf24_config(uint8_t channel, uint8_t pay_length)
  33          {
  34   1          /* Use static payload length ... */
  35   1          payload_len = pay_length;
  36   1      
  37   1          // Set RF channel
  38   1          nrf24_configRegister(RF_CH,channel);
  39   1      
  40   1          // Set length of incoming payload 
  41   1          nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
  42   1          nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
  43   1          nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
  44   1          nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
  45   1          nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
  46   1          nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
  47   1      
  48   1          // 1 Mbps, TX gain: 0dbm
  49   1          nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
  50   1      
  51   1          // CRC enable, 1 byte CRC length
  52   1          nrf24_configRegister(CONFIG,nrf24_CONFIG);
  53   1      
  54   1          // Auto Acknowledgment
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 2   

  55   1          nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P
             -5));
  56   1      
  57   1          // Enable RX addresses
  58   1          nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5)
             -);
  59   1      
  60   1          // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
  61   1          nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
  62   1      
  63   1          // Dynamic length configurations: No dynamic length
  64   1          nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
  65   1      
  66   1          // Start listening
  67   1          nrf24_powerUpRx();
  68   1      }
  69          
  70          /* Set the RX address */
  71          void nrf24_rx_address(uint8_t * adr) 
  72          {
  73   1          nrf24_ce_digitalWrite(LOW);
  74   1          nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
  75   1          nrf24_ce_digitalWrite(HIGH);
  76   1      }
  77          
  78          /* Returns the payload length */
  79          /*
  80          uint8_t nrf24_payload_length()
  81          {
  82              return payload_len;
  83          }
  84          */
  85          /* Set the TX address */
  86          void nrf24_tx_address(uint8_t* adr)
  87          {
  88   1          /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
  89   1          nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
  90   1          nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
  91   1      }
  92          
  93          /* Checks if data is available for reading */
  94          /* Returns 1 if data is ready ... */
  95          uint8_t nrf24_dataReady() 
  96          {
  97   1          // See note in getData() function - just checking RX_DR isn't good enough
  98   1          uint8_t status = nrf24_getStatus();
  99   1      
 100   1          // We can short circuit on RX_DR, but if it's not set, we still need
 101   1          // to check the FIFO for any pending packets
 102   1          if ( status & (1 << RX_DR) ) 
 103   1          {
 104   2              return 1;
 105   2          }
 106   1      
 107   1          return !nrf24_rxFifoEmpty();;
 108   1      }
 109          
 110          /* Checks if receive FIFO is empty or not */
 111          uint8_t nrf24_rxFifoEmpty()
 112          {
 113   1          uint8_t fifoStatus;
 114   1      
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 3   

 115   1          nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 116   1          
 117   1          return (fifoStatus & (1 << RX_EMPTY));
 118   1      }
 119          
 120          /* Returns the length of data waiting in the RX fifo */
 121          /*
 122          uint8_t nrf24_payloadLength()
 123          {
 124              uint8_t status;
 125              nrf24_csn_digitalWrite(LOW);
 126              spi_transfer(R_RX_PL_WID);
 127              status = spi_transfer(0x00);
 128              nrf24_csn_digitalWrite(HIGH);
 129              return status;
 130          }
 131          */
 132          /* Reads payload bytes into data array */
 133          void nrf24_getData(uint8_t* dat) 
 134          {
 135   1          /* Pull down chip select */
 136   1          nrf24_csn_digitalWrite(LOW);                               
 137   1      
 138   1          /* Send cmd to read rx payload */
 139   1          spi_transfer( R_RX_PAYLOAD );
 140   1          
 141   1          /* Read payload */
 142   1          nrf24_transferSync(dat,dat,payload_len);
 143   1          
 144   1          /* Pull up chip select */
 145   1          nrf24_csn_digitalWrite(HIGH);
 146   1      
 147   1          /* Reset status register */
 148   1          nrf24_configRegister(STATUS,(1<<RX_DR));   
 149   1      }
 150          
 151          /* Returns the number of retransmissions occured for the last message */
 152          /*
 153          uint8_t nrf24_retransmissionCount()
 154          {
 155              uint8_t rv;
 156              nrf24_readRegister(OBSERVE_TX,&rv,1);
 157              rv = rv & 0x0F;
 158              return rv;
 159          }
 160          */
 161          // Sends a data package to the default address. Be sure to send the correct
 162          // amount of bytes as configured as payload on the receiver.
 163          void nrf24_send(uint8_t* value) 
 164          {    
 165   1          /* Go to Standby-I first */
 166   1          nrf24_ce_digitalWrite(LOW);
 167   1           
 168   1          /* Set to transmitter mode , Power up if needed */
 169   1          nrf24_powerUpTx();
 170   1      
 171   1          /* Do we really need to flush TX fifo each time ? */
 172   1          #if 1
 173   1              /* Pull down chip select */
 174   1              nrf24_csn_digitalWrite(LOW);           
 175   1      
 176   1              /* Write cmd to flush transmit FIFO */
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 4   

 177   1              spi_transfer(FLUSH_TX);     
 178   1      
 179   1              /* Pull up chip select */
 180   1              nrf24_csn_digitalWrite(HIGH);                    
 181   1          #endif 
 182   1      
 183   1          /* Pull down chip select */
 184   1          nrf24_csn_digitalWrite(LOW);
 185   1      
 186   1          /* Write cmd to write payload */
 187   1          spi_transfer(W_TX_PAYLOAD);
 188   1      
 189   1          /* Write payload */
 190   1          nrf24_transmitSync(value,payload_len);   
 191   1      
 192   1          /* Pull up chip select */
 193   1          nrf24_csn_digitalWrite(HIGH);
 194   1      
 195   1          /* Start the transmission */
 196   1          nrf24_ce_digitalWrite(HIGH);    
 197   1      }
 198          
 199          uint8_t nrf24_isSending()
 200          {
 201   1          uint8_t status;
 202   1      
 203   1          /* read the current status */
 204   1          status = nrf24_getStatus();
 205   1                      
 206   1          /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
 207   1          if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 208   1          {        
 209   2              return 0; /* false */
 210   2          }
 211   1      
 212   1          return 1; /* true */
 213   1      
 214   1      }
 215          
 216          uint8_t nrf24_getStatus()
 217          {
 218   1          uint8_t rv;
 219   1          nrf24_csn_digitalWrite(LOW);
 220   1          rv = spi_transfer(NOPR);
 221   1          nrf24_csn_digitalWrite(HIGH);
 222   1          return rv;
 223   1      }
 224          
 225          uint8_t nrf24_lastMessageStatus()
 226          {
 227   1          uint8_t rv;
 228   1      
 229   1          rv = nrf24_getStatus();
 230   1      
 231   1          /* Transmission went OK */
 232   1          if((rv & ((1 << TX_DS))))
 233   1          {
 234   2              return NRF24_TRANSMISSON_OK;
 235   2          }
 236   1          /* Maximum retransmission count is reached */
 237   1          /* Last message probably went missing ... */
 238   1          else if((rv & ((1 << MAX_RT))))
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 5   

 239   1          {
 240   2              return NRF24_MESSAGE_LOST;
 241   2          }  
 242   1          /* Probably still sending ... */
 243   1          else
 244   1          {
 245   2              return 0xFF;
 246   2          }
 247   1      }
 248          
 249          void nrf24_powerUpRx()
 250          {     
 251   1          nrf24_csn_digitalWrite(LOW);
 252   1          spi_transfer(FLUSH_RX);
 253   1          nrf24_csn_digitalWrite(HIGH);
 254   1      
 255   1          nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 256   1      
 257   1          nrf24_ce_digitalWrite(LOW);    
 258   1          nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 259   1          nrf24_ce_digitalWrite(HIGH);
 260   1      }
 261          
 262          void nrf24_powerUpTx()
 263          {
 264   1          nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 265   1      
 266   1          nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 267   1      }
 268          /*
 269          void nrf24_powerDown()
 270          {
 271              nrf24_ce_digitalWrite(LOW);
 272              nrf24_configRegister(CONFIG,nrf24_CONFIG);
 273          }
 274          */
 275          /* software spi routine */
 276          uint8_t spi_transfer(uint8_t tx)
 277          {
 278   1          uint8_t i = 0;
 279   1          uint8_t rx = 0;    
 280   1      
 281   1          nrf24_sck_digitalWrite(LOW);
 282   1      
 283   1          for(i=0;i<8;i++)
 284   1          {
 285   2      
 286   2              if(tx & (1<<(7-i)))
 287   2              {
 288   3                  nrf24_mosi_digitalWrite(HIGH);            
 289   3              }
 290   2              else
 291   2              {
 292   3                  nrf24_mosi_digitalWrite(LOW);
 293   3              }
 294   2      
 295   2              nrf24_sck_digitalWrite(HIGH);        
 296   2      
 297   2              rx = rx << 1;
 298   2              if(nrf24_miso_digitalRead())
 299   2              {
 300   3                  rx |= 0x01;
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 6   

 301   3              }
 302   2      
 303   2              nrf24_sck_digitalWrite(LOW);                
 304   2      
 305   2          }
 306   1      
 307   1          return rx;
 308   1      }
 309          
 310          /* send and receive multiple bytes over SPI */
 311          void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
 312          {
 313   1          uint8_t i;
 314   1      
 315   1          for(i=0;i<len;i++)
 316   1          {
 317   2              datain[i] = spi_transfer(dataout[i]);
 318   2          }
 319   1      
 320   1      }
 321          
 322          /* send multiple bytes over SPI */
 323          void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
 324          {
 325   1          uint8_t i;
 326   1          
 327   1          for(i=0;i<len;i++)
 328   1          {
 329   2              spi_transfer(dataout[i]);
 330   2          }
 331   1      
 332   1      }
 333          
 334          /* Clocks only one byte into the given nrf24 register */
 335          void nrf24_configRegister(uint8_t reg, uint8_t value)
 336          {
 337   1          nrf24_csn_digitalWrite(LOW);
 338   1          spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 339   1          spi_transfer(value);
 340   1          nrf24_csn_digitalWrite(HIGH);
 341   1      }
 342          
 343          /* Read single register from nrf24 */
 344          void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
 345          {
 346   1          nrf24_csn_digitalWrite(LOW);
 347   1          spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 348   1          nrf24_transferSync(value,value,len);
 349   1          nrf24_csn_digitalWrite(HIGH);
 350   1      }
 351          
 352          /* Write to a single register of nrf24 */
 353          void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
 354          {
 355   1          nrf24_csn_digitalWrite(LOW);
 356   1          spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 357   1          nrf24_transmitSync(value,len);
 358   1          nrf24_csn_digitalWrite(HIGH);
 359   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.51   NRF24                                                                 10/04/2018 18:56:22 PAGE 7   

   CODE SIZE        =    598    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      33
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
